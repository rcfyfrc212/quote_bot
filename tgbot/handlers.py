import os
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from .loader import dp, db
from .keyboards import startIkb, cancelIkb
from .states import States

@dp.message(CommandStart())
async def start(message: Message):
    try:
        await message.answer(
            text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n'
                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤ –±–æ—Ç–µ: <code>{db.getQuotesCount()}</code>\n',
            reply_markup=startIkb
        )
    
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

@dp.callback_query(F.data == 'add_quote')
async def addQuote(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É: ',
        reply_markup=cancelIkb
    )

    await state.set_state(States.addQuote)

@dp.message(States.addQuote)
async def addQuoteHandler(message: Message, state: FSMContext):
    quote = message.text

    if len(quote) < 10:
        return await message.answer(
            text='‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ü–∏—Ç–∞—Ç—ã 10 —Å–∏–º–≤–æ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É:',
            reply_markup=cancelIkb
        )
    
    try:
        db.addQuote(quote)
        await message.answer('‚úÖ –ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')
    
    except:
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')

@dp.callback_query(F.data == 'random_quote')
async def randomQuote(callback: CallbackQuery):
    try:
        if db.getQuotesCount():
            await callback.message.answer(
                "<b>–†–∞–Ω–¥–æ–º–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞: </b>\n"
                f"<code>{db.getRandomQuote()}</code>\n\n"
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start"
            )
        
        else:
            await callback.message.answer('‚ùóÔ∏è –í –±–∞–∑–µ –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')
    
    except:
        await callback.message.answer(
            '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ü–∏—Ç–∞—Ç—É\n –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start'
        )

@dp.callback_query(F.data == 'cancel')
async def cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.message.delete()

@dp.message()
async def unknown(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')